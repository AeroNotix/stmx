KNOWN BUGS

none :)


FIXED BUGS:

1) (commit) could call (condition-notify) too early, before the relevant thread
   is sleeping in (condition-wait) inside (wait-once).
   
   Solution: since we cannot keep locks on tlogs while also locking
   tvars (DEADLOCK!), we added a flag 'prevent-sleep to tlog,
   and always read/write it while holding a lock on the tlog,
   
   then we do in (commit):
   (with-lock-held (lock-of log)
      (setf (prevent-sleep-of log) t)
      (condition-notify log (lock-of log)))
   
   and in (wait-once):
   (with-lock-held (lock-of log)
      (setf (prevent-sleep-of log) nil) ;; needed? should be the initial value
      
   ;; ... loop on (reads-of log) to enqueue on their waiting list,
   ;;     WHILE checking if they changed ...
   
   (with-lock-held (lock-of log)
      (unless (prevent-sleep-of log)
         (condition-wait log (lock-of log))))

2) (wait-once) was returning without removing the log from tvars
   waiting list. Each tvar would remove all the waiting logs when it
   notified it has changed, but unchanged vars could accumulate a LOT
   of enqueued logs, leaking memory.
   
   Solution: replaced tvar waiting queue with a hash-table, so now
   (wait-once) before returning explicitly removes its log from tvars
   waiting list.
